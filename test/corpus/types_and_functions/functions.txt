================================================================================
Functions 1
================================================================================

plus : Nat -> Nat -> Nat
plus Z     y = y
plus (S k) y = S (plus k y)

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (colon)
    (exp_name
      (caname))
    (arrow_separator)
    (exp_name
      (caname))
    (arrow_separator)
    (exp_name
      (caname)))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (caname))
          (pat_name
            (loname)))))
    (rhs
      (exp_name
        (loname))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_parens
            (pat_name
              (caname))
            (pat_name
              (loname)))
          (pat_name
            (loname)))))
    (rhs
      (exp_name
        (caname))
      (exp_parens
        (exp_name
          (loname))
        (exp_name
          (loname))
        (exp_name
          (loname))))))

================================================================================
Functions 2
================================================================================

mult : Nat -> Nat -> Nat
mult Z     y = Z
mult (S k) y = plus y (mult k y)

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (colon)
    (exp_name
      (caname))
    (arrow_separator)
    (exp_name
      (caname))
    (arrow_separator)
    (exp_name
      (caname)))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (caname))
          (pat_name
            (loname)))))
    (rhs
      (exp_name
        (caname))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_parens
            (pat_name
              (caname))
            (pat_name
              (loname)))
          (pat_name
            (loname)))))
    (rhs
      (exp_name
        (loname))
      (exp_name
        (loname))
      (exp_parens
        (exp_name
          (loname))
        (exp_name
          (loname))
        (exp_name
          (loname))))))

================================================================================
where clauses 1
================================================================================

reverse : List a -> List a
reverse xs = revAcc [] xs where
  revAcc : List a -> List a -> List a
  revAcc acc [] = acc
  revAcc acc (x :: xs) = revAcc (x :: acc) xs

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (colon)
    (exp_name
      (caname))
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (caname))
    (exp_name
      (loname)))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname)))))
    (rhs
      (exp_name
        (loname))
      (exp_list)
      (exp_name
        (loname)))
    (where)
    (declarations
      (signature
        (loname)
        (colon)
        (exp_name
          (caname))
        (exp_name
          (loname))
        (arrow_separator)
        (exp_name
          (caname))
        (exp_name
          (loname))
        (arrow_separator)
        (exp_name
          (caname))
        (exp_name
          (loname)))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_name
                (loname))
              (pat_list))))
        (rhs
          (exp_name
            (loname))))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_name
                (loname))
              (pat_parens
                (pat_name
                  (loname))
                (pat_op)
                (pat_name
                  (loname))))))
        (rhs
          (exp_name
            (loname))
          (exp_parens
            (exp_name
              (loname))
            (operator)
            (exp_name
              (loname)))
          (exp_name
            (loname)))))))

================================================================================
where clauses 2
================================================================================

foo : Int -> Int
foo x = case isLT of
            Yes => x*2
            No => x*4
    where
       isLT : MyLT
       isLT = if x < 20 then Yes else No
       data MyLT = Yes | No

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (colon)
    (exp_name
      (caname))
    (arrow_separator)
    (exp_name
      (caname)))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname)))))
    (rhs
      (exp_case
        (exp_name
          (loname))
        (alts
          (alt
            (pat_name
              (caname))
            (exp_name
              (loname))
            (operator)
            (literal
              (integer)))
          (alt
            (pat_name
              (caname))
            (exp_name
              (loname))
            (operator)
            (literal
              (integer))
            (where)
            (declarations
              (signature
                (loname)
                (colon)
                (exp_name
                  (caname)))
              (function
                (lhs
                  (funvar
                    (loname)))
                (rhs
                  (exp_if
                    (exp_name
                      (loname))
                    (operator)
                    (literal
                      (integer))
                    (exp_then
                      (exp_name
                        (caname)))
                    (exp_else
                      (exp_name
                        (caname))))))
              (data
                (data_name)
                (exp_name
                  (caname))
                (exp_name
                  (caname))))))))))

================================================================================
where clauses 3
================================================================================

even : Nat -> Bool
even Z = True
even (S k) = odd k where
  odd : Nat -> Bool
  odd Z = False
  odd (S k) = even k

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (colon)
    (exp_name
      (caname))
    (arrow_separator)
    (exp_name
      (caname)))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (caname)))))
    (rhs
      (exp_name
        (caname))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_parens
            (pat_name
              (caname))
            (pat_name
              (loname))))))
    (rhs
      (exp_name
        (loname))
      (exp_name
        (loname)))
    (where)
    (declarations
      (signature
        (loname)
        (colon)
        (exp_name
          (caname))
        (arrow_separator)
        (exp_name
          (caname)))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_name
                (caname)))))
        (rhs
          (exp_name
            (caname))))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_parens
                (pat_name
                  (caname))
                (pat_name
                  (loname))))))
        (rhs
          (exp_name
            (loname))
          (exp_name
            (loname)))))))

================================================================================
where clauses 4
================================================================================

test : List Nat
test = [c (S 1), c Z, d (S Z)]
  where c : Nat -> Nat
        c x = 42 + x

        d : Nat -> Nat
        d y = c (y + 1 + z y)
              where z : Nat -> Nat
                    z w = y + w

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (colon)
    (exp_name
      (caname))
    (exp_name
      (caname)))
  (function
    (lhs
      (funvar
        (loname)))
    (rhs
      (exp_list
        (exp_name
          (loname))
        (exp_parens
          (exp_name
            (caname))
          (literal
            (integer)))
        (comma)
        (exp_name
          (loname))
        (exp_name
          (caname))
        (comma)
        (exp_name
          (loname))
        (exp_parens
          (exp_name
            (caname))
          (exp_name
            (caname)))))
    (where)
    (declarations
      (signature
        (loname)
        (colon)
        (exp_name
          (caname))
        (arrow_separator)
        (exp_name
          (caname)))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_name
                (loname)))))
        (rhs
          (literal
            (integer))
          (operator)
          (exp_name
            (loname))))
      (signature
        (loname)
        (colon)
        (exp_name
          (caname))
        (arrow_separator)
        (exp_name
          (caname)))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_name
                (loname)))))
        (rhs
          (exp_name
            (loname))
          (exp_parens
            (exp_name
              (loname))
            (operator)
            (literal
              (integer))
            (operator)
            (exp_name
              (loname))
            (exp_name
              (loname))))
        (where)
        (declarations
          (signature
            (loname)
            (colon)
            (exp_name
              (caname))
            (arrow_separator)
            (exp_name
              (caname)))
          (function
            (lhs
              (funvar
                (loname)
                (patterns
                  (pat_name
                    (loname)))))
            (rhs
              (exp_name
                (loname))
              (operator)
              (exp_name
                (loname)))))))))

================================================================================
Function arg with at wildcard
================================================================================

ltrim str@_ = str

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname))
          (pat_at_wildcard))))
    (rhs
      (exp_name
        (loname)))))

================================================================================
Function arg with function decomposition 1
================================================================================

parsePosTrimmed (strCons '+' xs) | (StrCons '+' xs) = _

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_parens
            (pat_name
              (loname))
            (pat_literal
              (char))
            (pat_name
              (loname))))))
    (with_pat
      (pat_parens
        (pat_name
          (caname))
        (pat_literal
          (char))
        (pat_name
          (loname))))
    (rhs
      (wildcard))))

================================================================================
Function arg with function decomposition 2
================================================================================

asList str@(strCons x xs) = x :: xs

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname))
          (pat_at_parens
            (pat_name
              (loname))
            (pat_name
              (loname))
            (pat_name
              (loname))))))
    (rhs
      (exp_name
        (loname))
      (operator)
      (exp_name
        (loname)))))

================================================================================
Implicit args 1
================================================================================

reflexive {x = Z} = LTEZero

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_braces
            (loname)
            (pat_name
              (caname))))))
    (rhs
      (exp_name
        (caname)))))

================================================================================
Implicit args 2
================================================================================

reflexive {x = S _} = LTESucc $ reflexive

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_braces
            (loname)
            (pat_name
              (caname))
            (wildcard)))))
    (rhs
      (exp_name
        (caname))
      (operator)
      (exp_name
        (loname)))))

================================================================================
Implicit args 3
================================================================================

lteAddRight (S k) {m} = LTESucc (lteAddRight {m} k)

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_parens
            (pat_name
              (caname))
            (pat_name
              (loname)))
          (pat_record
            (pat_fields
              (pat_field
                (field_name)))))))
    (rhs
      (exp_name
        (caname))
      (exp_parens
        (exp_name
          (loname))
        (type_braces
          (exp_name
            (loname)))
        (exp_name
          (loname))))))

================================================================================
Implicit args 4
================================================================================

gcd : (a: Nat) -> (b: Nat) -> {auto 0 ok: NotBothZero a b} -> Nat

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (colon)
    (type_parens
      (type_var
        (exp_name
          (loname))
        (colon)
        (exp_name
          (caname))))
    (arrow_separator)
    (type_parens
      (type_var
        (exp_name
          (loname))
        (colon)
        (exp_name
          (caname))))
    (arrow_separator)
    (type_braces
      (auto)
      (quantity)
      (exp_name
        (loname))
      (colon)
      (exp_name
        (caname))
      (exp_name
        (loname))
      (exp_name
        (loname)))
    (arrow_separator)
    (exp_name
      (caname))))

================================================================================
Implicit args 5
================================================================================

imapProperty i f @{ix :: ixs} (x :: xs) = _

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname))
          (pat_name
            (loname))
          (pat_at_braces
            (pat_name
              (loname))
            (pat_op)
            (pat_name
              (loname)))
          (pat_parens
            (pat_name
              (loname))
            (pat_op)
            (pat_name
              (loname))))))
    (rhs
      (wildcard))))

================================================================================
Type signature braces
================================================================================

asBitVector : FiniteBits a => a -> Vect (bitSize {a}) Bool

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (colon)
    (exp_name
      (caname))
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (caname))
    (exp_parens
      (exp_name
        (loname))
      (type_braces
        (exp_name
          (loname))))
    (exp_name
      (caname))))

================================================================================
Type signature with apply exp
================================================================================

0 lemma : {x : Integer} -> So (integerLessThanNat x n) -> So (fromInteger {ty=Nat} x < n)

--------------------------------------------------------------------------------

(idris
  (signature
    (quantity)
    (loname)
    (colon)
    (type_braces
      (exp_name
        (loname))
      (colon)
      (exp_name
        (caname)))
    (arrow_separator)
    (exp_name
      (caname))
    (exp_parens
      (exp_name
        (loname))
      (exp_name
        (loname))
      (exp_name
        (loname)))
    (arrow_separator)
    (exp_name
      (caname))
    (exp_parens
      (exp_name
        (loname))
      (exp_braces
        (explicit_arg
          (loname)
          (equal)
          (exp_name
            (caname))))
      (exp_name
        (loname))
      (operator)
      (exp_name
        (loname)))))

================================================================================
Type signature with forall
================================================================================

_ : {s : _} -> forall fs, ty .
  Struct s fs -> (n : String) ->
  FieldType n ty fs -> ty

--------------------------------------------------------------------------------

(idris
  (signature
    (wildcard)
    (colon)
    (type_braces
      (exp_name
        (loname))
      (colon)
      (wildcard))
    (arrow_separator)
    (forall)
    (comma)
    (exp_name
      (caname))
    (exp_name
      (loname))
    (exp_name
      (loname))
    (arrow_separator)
    (type_parens
      (type_var
        (exp_name
          (loname))
        (colon)
        (exp_name
          (caname))))
    (arrow_separator)
    (exp_name
      (caname))
    (exp_name
      (loname))
    (exp_name
      (loname))
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (loname))))

================================================================================
Type signature with let-in
================================================================================

example :
  let nats : Colist Nat; nats = fromStream Stream.nats in x

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (colon)
    (exp_let_in
      (declarations
        (signature
          (loname)
          (colon)
          (exp_name
            (caname))
          (exp_name
            (caname)))
        (lhs
          (pat_name
            (loname)))
        (rhs
          (exp_name
            (loname))
          (exp_name
            (qualified_loname
              (caname)
              (loname)))))
      (in
        (exp_name
          (loname))))))

================================================================================
Type signature with dependent pairs
================================================================================

_ : (ty : Type
    ** delta : (ty -> Telescope k)
    ** (v : ty) -> Environment (delta v) -> Environment gamma)

--------------------------------------------------------------------------------

(idris
  (signature
    (wildcard)
    (colon)
    (type_parens
      (type_var
        (exp_name
          (loname))
        (colon)
        (exp_name
          (caname)))
      (double_star)
      (type_var
        (exp_name
          (loname))
        (colon)
        (type_parens
          (exp_name
            (loname))
          (arrow_separator)
          (exp_name
            (caname))
          (exp_name
            (loname))))
      (double_star)
      (type_parens
        (type_var
          (exp_name
            (loname))
          (colon)
          (exp_name
            (loname))))
      (arrow_separator)
      (exp_name
        (caname))
      (exp_parens
        (exp_name
          (loname))
        (exp_name
          (loname)))
      (arrow_separator)
      (exp_name
        (caname))
      (exp_name
        (loname)))))

================================================================================
At braces 1
================================================================================

uninhabited (x, _) @{Left  _} = uninhabited x

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_parens
            (pat_name
              (loname))
            (tuple_operator)
            (wildcard))
          (pat_at_braces
            (pat_name
              (caname))
            (wildcard)))))
    (rhs
      (exp_name
        (loname))
      (exp_name
        (loname)))))

================================================================================
At braces 2
================================================================================

uninhabited Refl @{ab} = uninhabited @{ab} Refl

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (caname))
          (pat_at_braces
            (pat_name
              (loname))))))
    (rhs
      (exp_name
        (loname))
      (exp_explicit_impl
        (exp_name
          (loname)))
      (exp_name
        (caname)))))

================================================================================
At braces 3
================================================================================

CalcWith der = CalcSmart der @{preorderPrerequisite der}

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (caname)
        (patterns
          (pat_name
            (loname)))))
    (rhs
      (exp_name
        (caname))
      (exp_name
        (loname))
      (exp_explicit_impl
        (exp_name
          (loname))
        (exp_name
          (loname))))))

================================================================================
Explicit args
================================================================================

foldrVectHomomorphism = ShowVectHomomorphismProperty
  { nil  = Refl
  , cons = \x, xs => Calc $ _
  }

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)))
    (rhs
      (exp_name
        (caname))
      (exp_braces
        (explicit_arg
          (loname)
          (equal)
          (exp_name
            (caname)))
        (comma)
        (explicit_arg
          (loname)
          (equal)
          (exp_lambda
            (lambda_args
              (pat_name
                (loname))
              (comma)
              (pat_name
                (loname)))
            (lambda_exp
              (exp_name
                (caname))
              (operator)
              (wildcard))))))))

================================================================================
Totality partial
================================================================================

partial
fromMaybe : Maybe a -> a

--------------------------------------------------------------------------------

(idris
  (signature
    (totality)
    (loname)
    (colon)
    (exp_name
      (caname))
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (loname))))

================================================================================
Totality total
================================================================================

total
qsort : Ord a => List a -> List a

--------------------------------------------------------------------------------

(idris
  (signature
    (totality)
    (loname)
    (colon)
    (exp_name
      (caname))
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (caname))
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (caname))
    (exp_name
      (loname))))

================================================================================
Totality covering
================================================================================

covering
takeUntil : (n -> Bool) -> Stream n -> List n

--------------------------------------------------------------------------------

(idris
  (signature
    (totality)
    (loname)
    (colon)
    (type_parens
      (exp_name
        (loname))
      (arrow_separator)
      (exp_name
        (caname)))
    (arrow_separator)
    (exp_name
      (caname))
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (caname))
    (exp_name
      (loname))))

================================================================================
Totality and visibility
================================================================================

covering
public export
iterate : (f : a -> Maybe a) -> (x : a) -> List a

--------------------------------------------------------------------------------

(idris
  (signature
    (totality)
    (visibility)
    (loname)
    (colon)
    (type_parens
      (type_var
        (exp_name
          (loname))
        (colon)
        (exp_name
          (loname))
        (arrow_separator)
        (exp_name
          (caname))
        (exp_name
          (loname))))
    (arrow_separator)
    (type_parens
      (type_var
        (exp_name
          (loname))
        (colon)
        (exp_name
          (loname))))
    (arrow_separator)
    (exp_name
      (caname))
    (exp_name
      (loname))))

================================================================================
Quantity
================================================================================

0 F : Type -> Type

--------------------------------------------------------------------------------

(idris
  (signature
    (quantity)
    (caname)
    (colon)
    (exp_name
      (caname))
    (arrow_separator)
    (exp_name
      (caname))))

================================================================================
Holes
================================================================================

main: IO ()
main = putStrLn ?greeting

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (colon)
    (exp_name
      (caname))
    (unit))
  (function
    (lhs
      (funvar
        (loname)))
    (rhs
      (exp_name
        (loname))
      (operator)
      (exp_name
        (loname)))))

================================================================================
rewrite rule
================================================================================

helpEven j p = rewrite plusSuccRightSucc j j in p

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname))
          (pat_name
            (loname)))))
    (rhs
      (exp_rewrite_in
        (rewrite_exp
          (exp_name
            (loname))
          (exp_name
            (loname))
          (exp_name
            (loname)))
        (in
          (exp_name
            (loname)))))))

================================================================================
Capitalized function name 1
================================================================================

Foo : a -> Type

--------------------------------------------------------------------------------

(idris
  (signature
    (caname)
    (colon)
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (caname))))

================================================================================
Capitalized function name 2
================================================================================

Foo a = 3

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (caname)
        (patterns
          (pat_name
            (loname)))))
    (rhs
      (literal
        (integer)))))

================================================================================
Type function
================================================================================

Not : Type
Not p = p -> Void

--------------------------------------------------------------------------------

(idris
  (signature
    (caname)
    (colon)
    (exp_name
      (caname)))
  (function
    (lhs
      (funvar
        (caname)
        (patterns
          (pat_name
            (loname)))))
    (rhs
      (exp_name
        (loname))
      (arrow_separator)
      (exp_name
        (caname)))))

================================================================================
Operator 1
================================================================================

(+) : a -> a -> a

--------------------------------------------------------------------------------

(idris
  (signature
    (operator)
    (colon)
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (loname))))

================================================================================
Operator 2
================================================================================

(-) : a -> a -> a

--------------------------------------------------------------------------------

(idris
  (signature
    (operator)
    (colon)
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (loname))))

================================================================================
Operator 3
================================================================================

(+) x y = _

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (operator)
        (patterns
          (pat_name
            (loname))
          (pat_name
            (loname)))))
    (rhs
      (wildcard))))

================================================================================
Operator 4
================================================================================

(f <+> g) x = f x <+> g x

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (pat_parens
        (pat_name
          (loname))
        (pat_op)
        (pat_name
          (loname)))
      (pat_name
        (loname)))
    (rhs
      (exp_name
        (loname))
      (exp_name
        (loname))
      (operator)
      (exp_name
        (loname))
      (exp_name
        (loname)))))

================================================================================
Operator 5
================================================================================

_ == _ impossible

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (wildcard)
      (pat_op)
      (wildcard))
    (impossible)))

================================================================================
Operator 6
================================================================================

x :: xs == y :: ys = _

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_op)
          (pat_name
            (loname))
          (pat_op)
          (pat_name
            (loname))
          (pat_op)
          (pat_name
            (loname)))))
    (rhs
      (wildcard))))

================================================================================
Operator infix 1
================================================================================

infix 6 ===, ~=~

--------------------------------------------------------------------------------

(idris
  (fixity
    (integer)
    (operator)
    (comma)
    (operator)))

================================================================================
Operator infix 2
================================================================================

infixl 9 `div`, `mod`

--------------------------------------------------------------------------------

(idris
  (fixity
    (integer)
    (ticked_operator
      (loname))
    (comma)
    (ticked_operator
      (loname))))

================================================================================
Operator prefix
================================================================================

prefix 1  |~

--------------------------------------------------------------------------------

(idris
  (fixity
    (integer)
    (operator)))

================================================================================
Dot operator
================================================================================

(.unVal) : Singleton {a} x -> a
(.unVal) = unVal

--------------------------------------------------------------------------------

(idris
  (signature
    (dot_operator)
    (colon)
    (exp_name
      (caname))
    (type_braces
      (exp_name
        (loname)))
    (exp_name
      (loname))
    (arrow_separator)
    (exp_name
      (loname)))
  (function
    (lhs
      (funvar
        (dot_operator)))
    (rhs
      (exp_name
        (loname)))))

================================================================================
Dot operators chained
================================================================================

_ = (fileTime h <&> (.atime.sec)) @{Compose}

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (wildcard))
    (rhs
      (exp_parens
        (exp_name
          (loname))
        (exp_name
          (loname))
        (operator)
        (exp_name
          (dot_operator)
          (dot_operator)))
      (exp_explicit_impl
        (exp_name
          (caname))))))
