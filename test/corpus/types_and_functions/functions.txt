================================================================================
Functions 1
================================================================================

plus : Nat -> Nat -> Nat
plus Z     y = y
plus (S k) y = S (plus k y)

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_infix
      (type_name
        (caname))
      (operator)
      (type_infix
        (type_name
          (caname))
        (operator)
        (type_name
          (caname)))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (caname))
          (pat_name
            (loname)))))
    (rhs
      (exp_name
        (loname))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_tuple
            (pat_apply
              (caname)
              (pat_name
                (loname))))
          (pat_name
            (loname)))))
    (rhs
      (exp_apply
        (exp_name
          (caname))
        (exp_parens
          (exp_apply
            (exp_name
              (loname))
            (exp_name
              (loname))
            (exp_name
              (loname))))))))

================================================================================
Functions 2
================================================================================

mult : Nat -> Nat -> Nat
mult Z     y = Z
mult (S k) y = plus y (mult k y)

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_infix
      (type_name
        (caname))
      (operator)
      (type_infix
        (type_name
          (caname))
        (operator)
        (type_name
          (caname)))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (caname))
          (pat_name
            (loname)))))
    (rhs
      (exp_name
        (caname))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_tuple
            (pat_apply
              (caname)
              (pat_name
                (loname))))
          (pat_name
            (loname)))))
    (rhs
      (exp_apply
        (exp_name
          (loname))
        (exp_name
          (loname))
        (exp_parens
          (exp_apply
            (exp_name
              (loname))
            (exp_name
              (loname))
            (exp_name
              (loname))))))))

================================================================================
where clauses 1
================================================================================

reverse : List a -> List a
reverse xs = revAcc [] xs where
  revAcc : List a -> List a -> List a
  revAcc acc [] = acc
  revAcc acc (x :: xs) = revAcc (x :: acc) xs

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_infix
      (type_apply
        (type_name
          (caname))
        (type_name
          (loname)))
      (operator)
      (type_apply
        (type_name
          (caname))
        (type_name
          (loname)))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname)))))
    (rhs
      (exp_apply
        (exp_name
          (loname))
        (exp_list)
        (exp_name
          (loname))))
    (where)
    (declarations
      (signature
        (loname)
        (type_infix
          (type_apply
            (type_name
              (caname))
            (type_name
              (loname)))
          (operator)
          (type_infix
            (type_apply
              (type_name
                (caname))
              (type_name
                (loname)))
            (operator)
            (type_apply
              (type_name
                (caname))
              (type_name
                (loname))))))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_name
                (loname))
              (pat_list))))
        (rhs
          (exp_name
            (loname))))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_name
                (loname))
              (pat_tuple
                (pat_infix
                  (pat_name
                    (loname))
                  (operator)
                  (pat_name
                    (loname)))))))
        (rhs
          (exp_apply
            (exp_name
              (loname))
            (exp_parens
              (exp_name
                (loname))
              (operator)
              (exp_name
                (loname)))
            (exp_name
              (loname))))))))

================================================================================
where clauses 2
================================================================================

foo : Int -> Int
foo x = case isLT of
            Yes => x*2
            No => x*4
    where
       isLT : MyLT
       isLT = if x < 20 then Yes else No
       data MyLT = Yes | No


--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_infix
      (type_name
        (caname))
      (operator)
      (type_name
        (caname))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname)))))
    (rhs
      (exp_case
        (exp_name
          (loname))
        (alts
          (alt
            (pat_name
              (caname))
            (exp_name
              (loname))
            (operator)
            (exp_literal
              (integer)))
          (alt
            (pat_name
              (caname))
            (exp_name
              (loname))
            (operator)
            (exp_literal
              (integer))))))
    (where)
    (declarations
      (signature
        (loname)
        (type_name
          (caname)))
      (function
        (lhs
          (funvar
            (loname)))
        (rhs
          (exp_if
            (exp_name
              (loname))
            (operator)
            (exp_literal
              (integer))
            (exp_name
              (caname))
            (exp_name
              (caname)))))
      (data
        (data_name)
        (caname)
        (caname)))))

================================================================================
where clauses 3
================================================================================

even : Nat -> Bool
even Z = True
even (S k) = odd k where
  odd : Nat -> Bool
  odd Z = False
  odd (S k) = even k

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_infix
      (type_name
        (caname))
      (operator)
      (type_name
        (caname))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (caname)))))
    (rhs
      (exp_name
        (caname))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_tuple
            (pat_apply
              (caname)
              (pat_name
                (loname)))))))
    (rhs
      (exp_apply
        (exp_name
          (loname))
        (exp_name
          (loname))))
    (where)
    (declarations
      (signature
        (loname)
        (type_infix
          (type_name
            (caname))
          (operator)
          (type_name
            (caname))))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_name
                (caname)))))
        (rhs
          (exp_name
            (caname))))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_tuple
                (pat_apply
                  (caname)
                  (pat_name
                    (loname)))))))
        (rhs
          (exp_apply
            (exp_name
              (loname))
            (exp_name
              (loname))))))))

================================================================================
where clauses 4
================================================================================

test : List Nat
test = [c (S 1), c Z, d (S Z)]
  where c : Nat -> Nat
        c x = 42 + x

        d : Nat -> Nat
        d y = c (y + 1 + z y)
              where z : Nat -> Nat
                    z w = y + w

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_apply
      (type_name
        (caname))
      (type_name
        (caname))))
  (function
    (lhs
      (funvar
        (loname)))
    (rhs
      (exp_list
        (exp_apply
          (exp_name
            (loname))
          (exp_parens
            (exp_apply
              (exp_name
                (caname))
              (exp_literal
                (integer)))))
        (comma)
        (exp_apply
          (exp_name
            (loname))
          (exp_name
            (caname)))
        (comma)
        (exp_apply
          (exp_name
            (loname))
          (exp_parens
            (exp_apply
              (exp_name
                (caname))
              (exp_name
                (caname)))))))
    (where)
    (declarations
      (signature
        (loname)
        (type_infix
          (type_name
            (caname))
          (operator)
          (type_name
            (caname))))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_name
                (loname)))))
        (rhs
          (exp_literal
            (integer))
          (operator)
          (exp_name
            (loname))))
      (signature
        (loname)
        (type_infix
          (type_name
            (caname))
          (operator)
          (type_name
            (caname))))
      (function
        (lhs
          (funvar
            (loname)
            (patterns
              (pat_name
                (loname)))))
        (rhs
          (exp_apply
            (exp_name
              (loname))
            (exp_parens
              (exp_name
                (loname))
              (operator)
              (exp_literal
                (integer))
              (operator)
              (exp_apply
                (exp_name
                  (loname))
                (exp_name
                  (loname))))))
        (where)
        (declarations
          (signature
            (loname)
            (type_infix
              (type_name
                (caname))
              (operator)
              (type_name
                (caname))))
          (function
            (lhs
              (funvar
                (loname)
                (patterns
                  (pat_name
                    (loname)))))
            (rhs
              (exp_name
                (loname))
              (operator)
              (exp_name
                (loname)))))))))

================================================================================
At braces
================================================================================

uninhabited (x, _) @{Left  _} = uninhabited x

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_tuple
            (pat_name
              (loname))
            (tuple_operator)
            (pat_wildcard))
          (pat_at_braces
            (pat_apply
              (caname)
              (pat_wildcard))))))
    (rhs
      (exp_apply
        (exp_name
          (loname))
        (exp_name
          (loname))))))

================================================================================
Totality partial
================================================================================

partial
fromMaybe : Maybe a -> a

--------------------------------------------------------------------------------

(idris
  (signature
    (totality)
    (loname)
    (type_infix
      (type_apply
        (type_name
          (caname))
        (type_name
          (loname)))
      (operator)
      (type_name
        (loname)))))

================================================================================
Totality total
================================================================================

total
qsort : Ord a => List a -> List a

--------------------------------------------------------------------------------

(idris
  (signature
    (totality)
    (loname)
    (type_infix
      (type_apply
        (type_name
          (caname))
        (type_name
          (loname)))
      (operator)
      (type_infix
        (type_apply
          (type_name
            (caname))
          (type_name
            (loname)))
        (operator)
        (type_apply
          (type_name
            (caname))
          (type_name
            (loname)))))))

================================================================================
Totality covering
================================================================================

covering
takeUntil : (n -> Bool) -> Stream n -> List n

--------------------------------------------------------------------------------

(idris
  (signature
    (totality)
    (loname)
    (type_infix
      (type_parens
        (type_infix
          (type_name
            (loname))
          (operator)
          (type_name
            (caname))))
      (operator)
      (type_infix
        (type_apply
          (type_name
            (caname))
          (type_name
            (loname)))
        (operator)
        (type_apply
          (type_name
            (caname))
          (type_name
            (loname)))))))

================================================================================
Holes
================================================================================

main: IO ()
main = putStrLn ?greeting

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_apply
      (type_name
        (caname))
      (type_parens)))
  (function
    (lhs
      (funvar
        (loname)))
    (rhs
      (exp_apply
        (exp_name
          (loname))
        (hole)))))

================================================================================
rewrite rule
================================================================================

helpEven j p = rewrite plusSuccRightSucc j j in p

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname))
          (pat_name
            (loname)))))
    (rhs
      (exp_rewrite_in
        (rewrite_exp
          (exp_apply
            (exp_name
              (loname))
            (exp_name
              (loname))
            (exp_name
              (loname))))
        (exp_name
          (loname))))))

================================================================================
Capitalized function name 1
================================================================================

Foo : a -> Type

--------------------------------------------------------------------------------

(idris
  (signature
    (caname)
    (type_infix
      (type_name
        (loname))
      (operator)
      (type_name
        (caname)))))

================================================================================
Capitalized function name 2
================================================================================

Foo a = 3

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (caname)
        (patterns
          (pat_name
            (loname)))))
    (rhs
      (exp_literal
        (integer)))))

================================================================================
Type function
================================================================================

Not : Type
Not p = p -> Void

--------------------------------------------------------------------------------

(idris
  (signature
    (caname)
    (type_name
      (caname)))
  (function
    (lhs
      (funvar
        (caname)
        (patterns
          (pat_name
            (loname)))))
    (rhs
      (exp_name
        (loname))
      (operator)
      (exp_name
        (caname)))))

================================================================================
Operator 1
================================================================================

(+) : a -> a -> a

--------------------------------------------------------------------------------

(idris
  (signature
    (operator)
    (type_infix
      (type_name
        (loname))
      (operator)
      (type_infix
        (type_name
          (loname))
        (operator)
        (type_name
          (loname))))))

================================================================================
Operator 2
================================================================================

(-) : a -> a -> a

--------------------------------------------------------------------------------

(idris
  (signature
    (operator)
    (type_infix
      (type_name
        (loname))
      (operator)
      (type_infix
        (type_name
          (loname))
        (operator)
        (type_name
          (loname))))))

================================================================================
Operator 3
================================================================================

(+) x y = _

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funvar
        (operator)
        (patterns
          (pat_name
            (loname))
          (pat_name
            (loname)))))
    (rhs
      (wildcard))))

================================================================================
Operator 4
================================================================================

(f <+> g) x = f x <+> g x

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funop
        (patterns
          (pat_name
            (loname)))
        (operator)
        (patterns
          (pat_name
            (loname)))
        (patterns
          (pat_name
            (loname)))))
    (rhs
      (exp_apply
        (exp_name
          (loname))
        (exp_name
          (loname)))
      (operator)
      (exp_apply
        (exp_name
          (loname))
        (exp_name
          (loname))))))

================================================================================
Operator 5
================================================================================

_ == _ impossible

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funop
        (patterns
          (pat_wildcard))
        (operator)
        (patterns
          (pat_wildcard))))
    (impossible)))

================================================================================
Operator 6
================================================================================

x :: xs == y :: ys = _

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (funop
        (patterns
          (pat_name
            (loname))
          (operator)
          (pat_name
            (loname)))
        (operator)
        (patterns
          (pat_name
            (loname))
          (operator)
          (pat_name
            (loname)))))
    (rhs
      (wildcard))))

================================================================================
Operator infix 1
================================================================================

infix 6 ===, ~=~

--------------------------------------------------------------------------------

(idris
  (operator_declaration
    (integer)
    (operator)
    (comma)
    (operator)))

================================================================================
Operator infix 2
================================================================================

infixl 9 `div`, `mod`

--------------------------------------------------------------------------------

(idris
  (operator_declaration
    (integer)
    (ticked_operator
      (loname))
    (comma)
    (ticked_operator
      (loname))))
