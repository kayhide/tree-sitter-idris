================================================================================
let bindings 1
================================================================================

mirror xs = let xs' = reverse xs in
                xs ++ xs'

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (variable)
      (patterns
        (pat_name
          (variable))))
    (rhs
      (exp_let_in
        (declarations
          (function
            (lhs
              (variable))
            (rhs
              (exp_apply
                (exp_name
                  (variable))
                (exp_name
                  (variable))))))
        (exp_name
          (variable))
        (operator)
        (exp_name
          (variable))))))

================================================================================
let bindings 2
================================================================================

showPerson p = let MkPerson name age = p in
                   name ++ " is " ++ show age ++ " years old"

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (variable)
      (patterns
        (pat_name
          (variable))))
    (rhs
      (exp_let_in
        (declarations
          (function
            (lhs
              (variable)
              (patterns
                (pat_name
                  (variable))
                (pat_name
                  (variable))))
            (rhs
              (exp_name
                (variable)))))
        (exp_name
          (variable))
        (operator)
        (exp_literal
          (string))
        (operator)
        (exp_apply
          (exp_name
            (variable))
          (exp_name
            (variable)))
        (operator)
        (exp_literal
          (string))))))

================================================================================
let bindings 3
================================================================================

mirror xs = let xs' : List a = reverse xs in
                xs ++ xs'

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (variable)
      (patterns
        (pat_name
          (variable))))
    (rhs
      (exp_let_in
        (declarations
          (signature
            (variable)
            (type_infix
              (type_apply
                (type_name)
                (type_name
                  (type_variable)))
              (operator)
              (type_apply
                (type_name
                  (type_variable))
                (type_name
                  (type_variable))))))
        (exp_name
          (variable))
        (operator)
        (exp_name
          (variable))))))

================================================================================
let bindings 4
================================================================================

Diag v = let ty : Type := v = v in ty

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (variable)
      (patterns
        (pat_name
          (variable))))
    (rhs
      (exp_let_in
        (declarations
          (signature
            (variable)
            (type_infix
              (type_name)
              (operator)
              (type_infix
                (type_name
                  (type_variable))
                (operator)
                (type_name
                  (type_variable))))))
        (exp_name
          (variable))))))

================================================================================
let bindings 5
================================================================================

foldMap f = let fo : m -> a -> m
                fo ac el = ac <+> f el
             in foldl fo neutral

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (variable)
      (patterns
        (pat_name
          (variable))))
    (rhs
      (exp_let_in
        (declarations
          (signature
            (variable)
            (type_infix
              (type_name
                (type_variable))
              (operator)
              (type_infix
                (type_name
                  (type_variable))
                (operator)
                (type_name
                  (type_variable)))))
          (function
            (lhs
              (variable)
              (patterns
                (pat_name
                  (variable))
                (pat_name
                  (variable))))
            (rhs
              (exp_name
                (variable))
              (operator)
              (exp_apply
                (exp_name
                  (variable))
                (exp_name
                  (variable))))))
        (exp_apply
          (exp_name
            (variable))
          (exp_name
            (variable))
          (exp_name
            (variable)))))))

================================================================================
let bindings 6
================================================================================

foldMap f = let fo : m -> a -> m
                fo ac el = ac <+> f el
                initial := neutral
             in foldl fo initial

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (variable)
      (patterns
        (pat_name
          (variable))))
    (rhs
      (exp_let_in
        (declarations
          (signature
            (variable)
            (type_infix
              (type_name
                (type_variable))
              (operator)
              (type_infix
                (type_name
                  (type_variable))
                (operator)
                (type_name
                  (type_variable)))))
          (function
            (lhs
              (variable)
              (patterns
                (pat_name
                  (variable))
                (pat_name
                  (variable))))
            (rhs
              (exp_name
                (variable))
              (operator)
              (exp_apply
                (exp_name
                  (variable))
                (exp_name
                  (variable)))))
          (function
            (lhs
              (variable))
            (rhs
              (exp_name
                (variable)))))
        (exp_apply
          (exp_name
            (variable))
          (exp_name
            (variable))
          (exp_name
            (variable)))))))

================================================================================
List comprehensions
================================================================================

pythag n = [ (x, y, z) | z <- [1..n], y <- [1..z], x <- [1..y],
                         x*x + y*y == z*z ]

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (variable)
      (patterns
        (pat_name
          (variable))))
    (rhs
      (exp_array
        (exp_tuple
          (exp_name
            (variable))
          (tuple_operator)
          (exp_name
            (variable))
          (tuple_operator)
          (exp_name
            (variable)))
        (operator)
        (exp_name
          (variable))
        (operator)
        (exp_array
          (exp_literal
            (integer))
          (operator)
          (exp_name
            (variable)))
        (comma)
        (exp_name
          (variable))
        (operator)
        (exp_array
          (exp_literal
            (integer))
          (operator)
          (exp_name
            (variable)))
        (comma)
        (exp_name
          (variable))
        (operator)
        (exp_array
          (exp_literal
            (integer))
          (operator)
          (exp_name
            (variable)))
        (comma)
        (exp_name
          (variable))
        (operator)
        (exp_name
          (variable))
        (operator)
        (exp_name
          (variable))
        (operator)
        (exp_name
          (variable))
        (operator)
        (exp_name
          (variable))
        (operator)
        (exp_name
          (variable))))))

================================================================================
case expressions 1
================================================================================

splitAt c x = case break (== c) x of
                  (l, r) => (l, strTail r)

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (variable)
      (patterns
        (pat_name
          (variable))
        (pat_name
          (variable))))
    (rhs
      (exp_case
        (exp_apply
          (exp_name
            (variable))
          (exp_section_left
            (operator)
            (exp_name
              (variable)))
          (exp_name
            (variable)))
        (alts
          (alt
            (pat_tuple
              (pat_name
                (variable))
              (tuple_operator)
              (pat_name
                (variable)))
            (exp_tuple
              (exp_name
                (variable))
              (tuple_operator)
              (exp_apply
                (exp_name
                  (variable))
                (exp_name
                  (variable))))))))))

================================================================================
case expressions 2
================================================================================

lookup_default i xs def = case list_lookup i xs of
                              Nothing => def
                              Just x => x

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (variable)
      (patterns
        (pat_name
          (variable))
        (pat_name
          (variable))
        (pat_name
          (variable))))
    (rhs
      (exp_case
        (exp_apply
          (exp_name
            (variable))
          (exp_name
            (variable))
          (exp_name
            (variable)))
        (alts
          (alt
            (pat_name
              (constructor))
            (exp_name
              (variable)))
          (alt
            (pat_apply
              (pat_name
                (constructor))
              (pat_name
                (variable)))
            (exp_name
              (variable))))))))

================================================================================
Lambda functions
================================================================================

on f g = \x, y => g x `f` g y

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (variable)
      (patterns
        (pat_name
          (variable))
        (pat_name
          (variable))))
    (rhs
      (exp_lambda
        (pat_name
          (variable))
        (comma)
        (pat_name
          (variable))
        (exp_apply
          (exp_name
            (variable))
          (exp_name
            (variable)))
        (exp_ticked
          (exp_name
            (variable)))
        (exp_apply
          (exp_name
            (variable))
          (exp_name
            (variable)))))))

================================================================================
Idiom brackets
================================================================================

fun <*> x = [| fun <*> x |]

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (patterns
        (pat_name
          (variable)))
      (operator)
      (patterns
        (pat_name
          (variable))))
    (rhs
      (exp_idiom
        (exp_name
          (variable))
        (operator)
        (exp_name
          (variable))))))

================================================================================
!-notation 1
================================================================================

m_add x y = pure (!x + !y)

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (variable)
      (patterns
        (pat_name
          (variable))
        (pat_name
          (variable))))
    (rhs
      (exp_apply
        (exp_name
          (variable))
        (exp_parens
          (exp_name
            (bang)
            (variable))
          (operator)
          (exp_name
            (bang)
            (variable)))))))

================================================================================
!-notation 2
================================================================================

_ = let y = 94 in f !(g !(print y) !x)

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (wildcard))
    (rhs
      (exp_let_in
        (declarations
          (function
            (lhs
              (variable))
            (rhs
              (exp_literal
                (integer)))))
        (exp_apply
          (exp_name
            (variable))
          (exp_parens
            (bang)
            (exp_apply
              (exp_name
                (variable))
              (exp_parens
                (bang)
                (exp_apply
                  (exp_name
                    (variable))
                  (exp_name
                    (variable))))
              (exp_name
                (bang)
                (variable)))))))))
