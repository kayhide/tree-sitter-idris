================================================================================
do notation
================================================================================

greet : IO ()
greet = do
  putStr "What is your name? "
  name <- getLine
  putStrLn ("Hello " ++ name)

--------------------------------------------------------------------------------

(idris
  (signature
    (variable)
    (type_apply
      (type_name)
      (type_parens)))
  (function
    (lhs
      (funvar
        (variable)))
    (rhs
      (exp_do
        (statement
          (exp_apply
            (exp_name
              (variable))
            (exp_literal
              (string))))
        (statement
          (bind_pattern
            (pat_name
              (variable))
            (exp_name
              (variable))))
        (statement
          (exp_apply
            (exp_name
              (variable))
            (exp_parens
              (exp_literal
                (string))
              (operator)
              (exp_name
                (variable)))))))))

================================================================================
Pattern matching bind 1
================================================================================

_ = do 
  Just x_ok <- readNumber
    | Nothing => pure Nothing
  Just y_ok <- readNumber
    | Nothing => pure Nothing
  pure (Just (x_ok, y_ok))


--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (wildcard))
    (rhs
      (exp_do
        (statement
          (bind_pattern
            (pat_apply
              (pat_name
                (constructor))
              (pat_name
                (variable)))
            (exp_name
              (variable))
            (bind_alt
              (pat_name
                (constructor))
              (exp_apply
                (exp_name
                  (variable))
                (exp_name
                  (constructor))))))
        (statement
          (bind_pattern
            (pat_apply
              (pat_name
                (constructor))
              (pat_name
                (variable)))
            (exp_name
              (variable))
            (bind_alt
              (pat_name
                (constructor))
              (exp_apply
                (exp_name
                  (variable))
                (exp_name
                  (constructor))))))
        (statement
          (exp_apply
            (exp_name
              (variable))
            (exp_parens
              (exp_apply
                (exp_name
                  (constructor))
                (exp_tuple
                  (exp_name
                    (variable))
                  (tuple_operator)
                  (exp_name
                    (variable)))))))))))

================================================================================
Pattern matching bind 2
================================================================================

_ = do
  let Just x = f
    | Nothing => pure Nothing
  pure x

--------------------------------------------------------------------------------

(idris
  (function
    (lhs
      (wildcard))
    (rhs
      (exp_do
        (statement
          (let
            (declarations
              (function
                (lhs
                  (funvar
                    (variable)
                    (patterns
                      (pat_name
                        (variable)))))
                (rhs
                  (exp_name
                    (variable)))))
            (bind_alt
              (pat_name
                (constructor))
              (exp_apply
                (exp_name
                  (variable))
                (exp_name
                  (constructor))))))
        (statement
          (exp_apply
            (exp_name
              (variable))
            (exp_name
              (variable))))))))
