================================================================================
Maybe 1
================================================================================

data Maybe a = Just a | Nothing

--------------------------------------------------------------------------------

(idris
  (data
    (data_name)
    (type_variable)
    (caname)
    (type_name
      (loname))
    (caname)))

================================================================================
Maybe 2
================================================================================

list_lookup : Nat -> List a -> Maybe a
list_lookup _     Nil         = Nothing
list_lookup Z     (x :: xs) = Just x
list_lookup (S k) (x :: xs) = list_lookup k xs

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_name
      (caname))
    (operator)
    (type_name
      (caname))
    (type_name
      (loname))
    (operator)
    (type_name
      (caname))
    (type_name
      (loname)))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_wildcard)
          (pat_name
            (caname)))))
    (rhs
      (exp_name
        (caname))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (caname))
          (pat_parens
            (pat_name
              (loname))
            (pat_op)
            (pat_name
              (loname))))))
    (rhs
      (exp_name
        (caname))
      (exp_name
        (loname))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_parens
            (pat_name
              (caname))
            (pat_name
              (loname)))
          (pat_parens
            (pat_name
              (loname))
            (pat_op)
            (pat_name
              (loname))))))
    (rhs
      (exp_name
        (loname))
      (exp_name
        (loname))
      (exp_name
        (loname)))))

================================================================================
Maybe 3
================================================================================

maybe : Lazy b -> Lazy (a -> b) -> Maybe a -> b

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_name
      (caname))
    (type_name
      (loname))
    (operator)
    (type_name
      (caname))
    (type_parens
      (type_name
        (loname))
      (operator)
      (type_name
        (loname)))
    (operator)
    (type_name
      (caname))
    (type_name
      (loname))
    (operator)
    (type_name
      (loname))))

================================================================================
Tuples 1
================================================================================

fred : (String, Int)
fred = ("Fred", 42)

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_parens
      (type_name
        (caname))
      (comma)
      (type_name
        (caname))))
  (function
    (lhs
      (funvar
        (loname)))
    (rhs
      (exp_tuple
        (exp_literal
          (string))
        (tuple_operator)
        (exp_literal
          (integer))))))

================================================================================
Tuples 2
================================================================================

jim : (String, Int, String)
jim = ("Jim", 25, "Cambridge")

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_parens
      (type_name
        (caname))
      (comma)
      (type_name
        (caname))
      (comma)
      (type_name
        (caname))))
  (function
    (lhs
      (funvar
        (loname)))
    (rhs
      (exp_tuple
        (exp_literal
          (string))
        (tuple_operator)
        (exp_literal
          (integer))
        (tuple_operator)
        (exp_literal
          (string))))))

================================================================================
Dependent Pairs 1
================================================================================

data DPair : (a : Type) -> (p : a -> Type) -> Type where
   MkDPair : {p : a -> Type} -> (x : a) -> p x -> DPair a p

--------------------------------------------------------------------------------

(idris
  (data
    (data_name)
    (type_signature
      (type_parens
        (type_name
          (loname))
        (operator)
        (type_name
          (caname)))
      (operator)
      (type_parens
        (type_name
          (loname))
        (operator)
        (type_name
          (loname))
        (operator)
        (type_name
          (caname)))
      (operator)
      (type_name
        (caname)))
    (where)
    (data_body
      (constructor_signature
        (caname)
        (type_signature
          (type_braces
            (implicit_arg
              (type_name
                (loname)))
            (type_name
              (loname))
            (operator)
            (type_name
              (caname)))
          (operator)
          (type_parens
            (type_name
              (loname))
            (operator)
            (type_name
              (loname)))
          (operator)
          (type_name
            (loname))
          (type_name
            (loname))
          (operator)
          (type_name
            (caname))
          (type_name
            (loname))
          (type_name
            (loname)))))))

================================================================================
Dependent Pairs 2
================================================================================

vec : (n : Nat ** Vect n Int)
vec = (2 ** [3, 4])

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_parens
      (type_name
        (loname))
      (operator)
      (type_name
        (caname))
      (operator)
      (type_name
        (caname))
      (type_name
        (loname))
      (type_name
        (caname))))
  (function
    (lhs
      (funvar
        (loname)))
    (rhs
      (exp_parens
        (exp_literal
          (integer))
        (exp_op)
        (exp_list
          (exp_literal
            (integer))
          (comma)
          (exp_literal
            (integer)))))))

================================================================================
Dependent Pairs 3
================================================================================

filter : (a -> Bool) -> Vect n a -> (n' ** Vect n' a)
filter p Nil = (_ ** [])
filter p (x :: xs)
    = case filter p xs of
           (_ ** xs') => if p x then (_ ** x :: xs')
                                else (_ ** xs')

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_parens
      (type_name
        (loname))
      (operator)
      (type_name
        (caname)))
    (operator)
    (type_name
      (caname))
    (type_name
      (loname))
    (type_name
      (loname))
    (operator)
    (type_parens
      (type_name
        (loname))
      (operator)
      (type_name
        (caname))
      (type_name
        (loname))
      (type_name
        (loname))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname))
          (pat_name
            (caname)))))
    (rhs
      (exp_parens
        (wildcard)
        (exp_op)
        (exp_list))))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname))
          (pat_parens
            (pat_name
              (loname))
            (pat_op)
            (pat_name
              (loname))))))
    (rhs
      (exp_case
        (exp_name
          (loname))
        (exp_name
          (loname))
        (exp_name
          (loname))
        (alts
          (alt
            (pat_parens
              (pat_wildcard)
              (pat_op)
              (pat_name
                (loname)))
            (exp_if
              (exp_name
                (loname))
              (exp_name
                (loname))
              (exp_then
                (exp_parens
                  (wildcard)
                  (exp_op)
                  (exp_name
                    (loname))
                  (exp_op)
                  (exp_name
                    (loname))))
              (exp_else
                (exp_parens
                  (wildcard)
                  (exp_op)
                  (exp_name
                    (loname)))))))))))

================================================================================
Records 1
================================================================================

record Person where
    constructor MkPerson
    firstName, middleName, lastName : String
    age : Int

--------------------------------------------------------------------------------

(idris
  (record
    (record_name)
    (where)
    (record_body
      (caname)
      (record_field
        (loname)
        (comma)
        (loname)
        (comma)
        (loname)
        (type_name
          (caname)))
      (record_field
        (loname)
        (type_name
          (caname))))))

================================================================================
Records 2
================================================================================

fred : Person
fred = MkPerson "Fred" "Joe" "Bloggs" 30

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_name
      (caname)))
  (function
    (lhs
      (funvar
        (loname)))
    (rhs
      (exp_name
        (caname))
      (exp_literal
        (string))
      (exp_literal
        (string))
      (exp_literal
        (string))
      (exp_literal
        (integer)))))

================================================================================
Records 3
================================================================================

record Class where
    constructor ClassInfo
    students : Vect n Person
    className : String

--------------------------------------------------------------------------------

(idris
  (record
    (record_name)
    (where)
    (record_body
      (caname)
      (record_field
        (loname)
        (type_name
          (caname))
        (type_name
          (loname))
        (type_name
          (caname)))
      (record_field
        (loname)
        (type_name
          (caname))))))

================================================================================
Records 4
================================================================================

addStudent : Person -> Class -> Class
addStudent p c = { students := p :: students c } c

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_name
      (caname))
    (operator)
    (type_name
      (caname))
    (operator)
    (type_name
      (caname)))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname))
          (pat_name
            (loname)))))
    (rhs
      (record_update
        (field_name)
        (exp_name
          (loname))
        (exp_op)
        (exp_name
          (loname))
        (exp_name
          (loname))
        (loname)))))

================================================================================
Records 5
================================================================================

addStudent' : Person -> Class -> Class
addStudent' p c = { students $= (p ::) } c

--------------------------------------------------------------------------------

(idris
  (signature
    (loname)
    (type_name
      (caname))
    (operator)
    (type_name
      (caname))
    (operator)
    (type_name
      (caname)))
  (function
    (lhs
      (funvar
        (loname)
        (patterns
          (pat_name
            (loname))
          (pat_name
            (loname)))))
    (rhs
      (record_update
        (field_name)
        (exp_parens
          (exp_name
            (loname))
          (exp_op))
        (loname)))))

================================================================================
Records 6
================================================================================

record DPair a (p : a -> Type) where
  constructor MkDPair
  fst : a
  snd : p fst

--------------------------------------------------------------------------------

(idris
  (record
    (record_name)
    (type_name
      (loname))
    (type_parens
      (type_name
        (loname))
      (operator)
      (type_name
        (loname))
      (operator)
      (type_name
        (caname)))
    (where)
    (record_body
      (caname)
      (record_field
        (loname)
        (type_name
          (loname)))
      (record_field
        (loname)
        (type_name
          (loname))
        (type_name
          (loname))))))

================================================================================
Records 7
================================================================================

record (<=>) (a, b : Type) where

--------------------------------------------------------------------------------

(idris
  (record
    (operator)
    (type_parens
      (type_name
        (loname))
      (comma)
      (type_name
        (loname))
      (operator)
      (type_name
        (caname)))
    (where)))

================================================================================
Record with operator constructor
================================================================================

record Exists {0 type : Type} this where
  constructor Evidence
  0 fst : type
  snd : this fst

--------------------------------------------------------------------------------

(idris
  (record
    (record_name)
    (type_braces
      (implicit_arg
        (quantity)
        (type_name
          (loname)))
      (type_name
        (caname)))
    (type_name
      (loname))
    (where)
    (record_body
      (caname)
      (record_field
        (quantity)
        (loname)
        (type_name
          (loname)))
      (record_field
        (loname)
        (type_name
          (loname))
        (type_name
          (loname))))))

================================================================================
Record with operator constructor
================================================================================

record List1 a where
  constructor (:::)
  head : a
  tail : List a

--------------------------------------------------------------------------------

(idris
  (record
    (record_name)
    (type_name
      (loname))
    (where)
    (record_body
      (operator)
      (record_field
        (loname)
        (type_name
          (loname)))
      (record_field
        (loname)
        (type_name
          (caname))
        (type_name
          (loname))))))

================================================================================
Recrod with implicit fields
================================================================================

record Split {a : Type} (p : a -> Type) (xys : List a) where
  {ayes, naws : List a}
  {auto interleaving : Interleaving ayes naws xys}

--------------------------------------------------------------------------------

(idris
  (record
    (record_name)
    (type_braces
      (implicit_arg
        (type_name
          (loname)))
      (type_name
        (caname)))
    (type_parens
      (type_name
        (loname))
      (operator)
      (type_name
        (loname))
      (operator)
      (type_name
        (caname)))
    (type_parens
      (type_name
        (loname))
      (operator)
      (type_name
        (caname))
      (type_name
        (loname)))
    (where)
    (record_body
      (implicit_record_field
        (loname)
        (comma)
        (loname)
        (type_name
          (caname))
        (type_name
          (loname)))
      (implicit_record_field
        (auto)
        (loname)
        (type_name
          (caname))
        (type_name
          (loname))
        (type_name
          (loname))
        (type_name
          (loname))))))
