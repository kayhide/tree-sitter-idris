================================================================================
Module 1
================================================================================

module Foo

--------------------------------------------------------------------------------

(idris
  (qualified_module
    (module)))

================================================================================
Module 2
================================================================================

module Foo.Bar

--------------------------------------------------------------------------------

(idris
  (qualified_module
    (module)
    (module)))

================================================================================
Export function
================================================================================

export
f : _

--------------------------------------------------------------------------------

(idris
  (signature
    (variable)
    (type_wildcard)))

================================================================================
Public export function
================================================================================

public export
f : _

--------------------------------------------------------------------------------

(idris
  (signature
    (variable)
    (type_wildcard)))

================================================================================
Export data
================================================================================

export
data X = _

--------------------------------------------------------------------------------

(idris
  (data
    (type)
    (constructor)))

================================================================================
Public export data
================================================================================

public export
data X = _

--------------------------------------------------------------------------------

(idris
  (data
    (type)
    (constructor)))

================================================================================
Export interface
================================================================================

export
interface I

--------------------------------------------------------------------------------

(idris
  (interface_declaration
    (interface_head
      (interface_name
        (type)))))

================================================================================
Public export interface
================================================================================

public export
interface I

--------------------------------------------------------------------------------

(idris
  (interface_declaration
    (interface_head
      (interface_name
        (type)))))

================================================================================
Private fixity
================================================================================

private
infix 5 +

--------------------------------------------------------------------------------

(idris
  (operator_declaration
    (integer)
    (operator)))

================================================================================
Export fixity
================================================================================

export
infix 6 *

--------------------------------------------------------------------------------

(idris
  (operator_declaration
    (integer)
    (operator)))

================================================================================
Public export fixity
================================================================================

public export
infix 7 ^

--------------------------------------------------------------------------------

(idris
  (operator_declaration
    (integer)
    (operator)))

================================================================================
Import
================================================================================

import B

--------------------------------------------------------------------------------

(idris
  (import
    (qualified_module
      (module))))

================================================================================
Re-export
================================================================================

import public C

--------------------------------------------------------------------------------

(idris
  (import
    (qualified_module
      (module))))

================================================================================
Renaming imports 1
================================================================================

import Data.List as L

--------------------------------------------------------------------------------

(idris
  (import
    (qualified_module
      (module)
      (module))
    (module)))

================================================================================
Renaming imports 2
================================================================================

import public Books.Hardback as Books

--------------------------------------------------------------------------------

(idris
  (import
    (qualified_module
      (module)
      (module))
    (module)))

================================================================================
Explicit Namespaces
================================================================================

namespace X
  export
  test : Int -> Int

--------------------------------------------------------------------------------

(idris
  (namespace
    (qualified_module
      (module))
    (namespace_body
      (signature
        (variable)
        (type_infix
          (type_name
            (type))
          (type_operator)
          (type_name
            (type)))))))

================================================================================
Explicit namespaces inside functions
================================================================================

withNSInside = g where
  namespace X
    export
    g : Nat

----

(idris
  (function
    (variable)
    (exp_name
      (variable))
    (where)
    (declarations
      (namespace
        (qualified_module
          (module))
        (namespace_body
          (signature
            (variable)
            (type_name
              (type))))))))

================================================================================
Parameterised blocks 1
================================================================================

parameters (x : Nat, y : Nat)
  addAll : Nat -> Nat

--------------------------------------------------------------------------------

(idris
  (parameters
    (variable)
    (type_name
      (type))
    (comma)
    (variable)
    (type_name
      (type))
    (parameters_body
      (signature
        (variable)
        (type_infix
          (type_name
            (type))
          (type_operator)
          (type_name
            (type)))))))

================================================================================
Parameterised blocks 2
================================================================================

parameters (y : Nat, xs : Vect x a)
  data Vects : Type -> Type where
    MkVects : Vect y a -> Vects a

  append : Vects a -> Vect (x + y) a

--------------------------------------------------------------------------------

(idris
  (parameters
    (variable)
    (type_name
      (type))
    (comma)
    (variable)
    (type_apply
      (type_name
        (type))
      (type_name
        (type_variable))
      (type_name
        (type_variable)))
    (parameters_body
      (data
        (type)
        (type_signature
          (type_infix
            (type_name
              (type))
            (type_operator)
            (type_name
              (type))))
        (where)
        (data_body
          (constructor_signature
            (constructor)
            (type_signature
              (type_infix
                (type_apply
                  (type_name
                    (type))
                  (type_name
                    (type_variable))
                  (type_name
                    (type_variable)))
                (type_operator)
                (type_apply
                  (type_name
                    (type))
                  (type_name
                    (type_variable))))))))
      (signature
        (variable)
        (type_infix
          (type_apply
            (type_name
              (type))
            (type_name
              (type_variable)))
          (type_operator)
          (type_apply
            (type_name
              (type))
            (type_parens
              (type_infix
                (type_name
                  (type_variable))
                (type_operator)
                (type_name
                  (type_variable))))
            (type_name
              (type_variable))))))))
