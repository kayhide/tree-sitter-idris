================================================================================
Interfaces 1
================================================================================

interface Show a where
    show : a -> String

--------------------------------------------------------------------------------

(idris
  (interface
    (interface_head
      (interface_name)
      (type_variable))
    (interface_body
      (where)
      (signature
        (variable)
        (type_infix
          (type_name
            (type_variable))
          (operator)
          (type_name))))))

================================================================================
Interfaces 2
================================================================================

Show Nat where
    show Z = "Z"

--------------------------------------------------------------------------------

(idris
  (implementation
    (implementation_head
      (interface_name)
      (type_name))
    (implementation_body
      (where)
      (function
        (variable)
        (patterns
          (pat_name
            (constructor)))
        (exp_literal
          (string))))))

================================================================================
Default Definitions
================================================================================

interface Eq a where
    x /= y = not (x == y)

--------------------------------------------------------------------------------

(idris
  (interface
    (interface_head
      (interface_name)
      (type_variable))
    (interface_body
      (where)
      (function
        (pattern
          (pat_name
            (variable)))
        (operator)
        (pattern
          (pat_name
            (variable)))
        (exp_apply
          (exp_name
            (variable))
          (exp_parens
            (exp_infix
              (exp_name
                (variable))
              (operator)
              (exp_name
                (variable)))))))))

================================================================================
Extending Interfaces 1
================================================================================

interface Eq a => Ord a where
    compare : a -> a -> Ordering

--------------------------------------------------------------------------------

(idris
  (interface
    (interface_head
      (constraints
        (constraint
          (interface_name)
          (type_name
            (type_variable))))
      (interface_name)
      (type_variable))
    (interface_body
      (where)
      (signature
        (variable)
        (type_infix
          (type_name
            (type_variable))
          (operator)
          (type_infix
            (type_name
              (type_variable))
            (operator)
            (type_name)))))))

================================================================================
Extending Interfaces 2
================================================================================

interface (Ord a, Show a) => OrdShow a where

--------------------------------------------------------------------------------

(idris
  (interface
    (interface_head
      (constraints
        (constraint
          (interface_name)
          (type_name
            (type_variable)))
        (comma)
        (constraint
          (interface_name)
          (type_name
            (type_variable))))
      (interface_name)
      (type_variable))
    (interface_body
      (where))))

================================================================================
Quantities for Parameters 1
================================================================================

interface Functor (0 f : Type -> Type) where

--------------------------------------------------------------------------------

(idris
  (interface
    (interface_head
      (interface_name)
      (annotated_type_variable
        (quantity)
        (type_variable)
        (type_infix
          (type_name)
          (operator)
          (type_name))))
    (interface_body
      (where))))

================================================================================
Quantities for Parameters 2
================================================================================

interface Functor f => Applicative (0 f : Type -> Type) where

--------------------------------------------------------------------------------

(idris
  (interface
    (interface_head
      (constraints
        (constraint
          (interface_name)
          (type_name
            (type_variable))))
      (interface_name)
      (annotated_type_variable
        (quantity)
        (type_variable)
        (type_infix
          (type_name)
          (operator)
          (type_name))))
    (interface_body
      (where))))

================================================================================
Named Implementations 1
================================================================================

[myord] Ord Nat where

--------------------------------------------------------------------------------

(idris
  (implementation
    (implementation_head
      (implementation_name)
      (interface_name)
      (type_name))
    (implementation_body
      (where))))

================================================================================
Named Implementations 2
================================================================================

[PlusNatMonoid] Monoid Nat using PlusNatSemi where

--------------------------------------------------------------------------------

(idris
  (implementation
    (implementation_head
      (implementation_name)
      (interface_name)
      (type_name)
      (using
        (implementation_name)))
    (implementation_body
      (where))))

================================================================================
Explicit arguments 1
================================================================================

_ = sort @{myord} xs

--------------------------------------------------------------------------------

(idris
  (function
    (pat_wildcard
      (pat_wildcard))
    (exp_apply
      (exp_name
        (variable))
      (exp_explicit_impl
        (implementation_name))
      (exp_name
        (variable)))))

================================================================================
Explicit arguments 2
================================================================================

and = force . concat @{All}

--------------------------------------------------------------------------------

(idris
  (function
    (variable)
    (exp_infix
      (exp_name
        (variable))
      (operator)
      (exp_apply
        (exp_name
          (variable))
        (exp_explicit_impl
          (implementation_name))))))

================================================================================
Empty implementation
================================================================================

Num Foo

--------------------------------------------------------------------------------

(idris
  (implementation
    (implementation_head
      (interface_name)
      (type_name))))

================================================================================
Implementation with visibility
================================================================================

export %inline
Cast Char Nat where

--------------------------------------------------------------------------------

(idris
  (implementation
    (implementation_head
      (visibility)
      (pragma_inline)
      (interface_name)
      (type_apply
        (type_name)
        (type_name)))
    (implementation_body
      (where))))

================================================================================
Implementation with constriants
================================================================================

public export
[Reverse] (fwd : Ord a) => Ord a where

--------------------------------------------------------------------------------

(idris
  (implementation
    (implementation_head
      (visibility)
      (implementation_name)
      (constraints
        (constraint
          (annotated_type_variable
            (type_variable)
            (type_apply
              (type_name)
              (type_name
                (type_variable))))))
      (interface_name)
      (type_name
        (type_variable)))
    (implementation_body
      (where))))

================================================================================
Implementation with more constriants
================================================================================

public export
[Compose] (l : Applicative f) => (r : Applicative g) => Applicative (f . g)
  using Functor.Compose where

--------------------------------------------------------------------------------

(idris
  (implementation
    (implementation_head
      (visibility)
      (implementation_name)
      (constraints
        (constraint
          (annotated_type_variable
            (type_variable)
            (type_apply
              (type_name)
              (type_name
                (type_variable))))))
      (constraints
        (constraint
          (annotated_type_variable
            (type_variable)
            (type_apply
              (type_name)
              (type_name
                (type_variable))))))
      (interface_name)
      (type_parens
        (type_infix
          (type_name
            (type_variable))
          (operator)
          (type_name
            (type_variable))))
      (using
        (implementation_name
          (module))))
    (implementation_body
      (where))))

================================================================================
Interface Constructors
================================================================================

interface A t => B t where
  constructor MkB

--------------------------------------------------------------------------------

(idris
  (interface
    (interface_head
      (constraints
        (constraint
          (interface_name)
          (type_name
            (type_variable))))
      (interface_name)
      (type_variable))
    (interface_body
      (where)
      (constructor))))

================================================================================
Determining Parameters
================================================================================

interface Monad m => MonadState s (0 m : Type -> Type) | m where

--------------------------------------------------------------------------------

(idris
  (interface
    (interface_head
      (constraints
        (constraint
          (interface_name)
          (type_name
            (type_variable))))
      (interface_name)
      (type_variable)
      (annotated_type_variable
        (quantity)
        (type_variable)
        (type_infix
          (type_name)
          (operator)
          (type_name)))
      (determining_params
        (type_variable)))
    (interface_body
      (where))))
